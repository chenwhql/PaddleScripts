grep: warning: GREP_OPTIONS is deprecated; please use an alias or script
{ // block 0
    var _generated_var_1 : fluid.VarType.STEP_SCOPES)
    var array_read_4.tmp_0 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var array_read_4.tmp_0@GRAD : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var array_write_0.out : fluid.VarType.LOD_TENSOR_ARRAY)
    var array_write_0.out@GRAD : fluid.VarType.LOD_TENSOR_ARRAY)
    var array_write_1.out : fluid.VarType.LOD_TENSOR_ARRAY)
    var array_write_1.out@GRAD : fluid.VarType.LOD_TENSOR_ARRAY)
    var d0 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var d1 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var d2 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var fill_constant_0.tmp_0 : fluid.VarType.LOD_TENSOR.shape(1,).astype(VarType.INT64)
    var fill_constant_1.tmp_0 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var fill_constant_2.tmp_0 : fluid.VarType.LOD_TENSOR.shape(1,).astype(VarType.INT64)
    var fill_constant_3.tmp_0 : fluid.VarType.LOD_TENSOR.shape(1,).astype(VarType.INT64)
    var fill_constant_4.tmp_0 : fluid.VarType.LOD_TENSOR.shape(1,).astype(VarType.INT64)
    var fill_constant_5.tmp_0 : fluid.VarType.LOD_TENSOR.shape(1,).astype(VarType.INT64)
    var less_than_0.tmp_0 : fluid.VarType.LOD_TENSOR.shape(1,).astype(VarType.BOOL)
    var less_than_1.tmp_0 : fluid.VarType.LOD_TENSOR.shape(1,).astype(VarType.BOOL)
    var mean_0.tmp_0 : fluid.VarType.LOD_TENSOR.shape(1,).astype(VarType.FP32)
    var mean_0.tmp_0@GRAD : fluid.VarType.LOD_TENSOR.shape(1,).astype(VarType.FP32)

    {Out=['fill_constant_0.tmp_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[]}, dtype = 3, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [1], str_value = 0, value = 0.0)
    {Out=['fill_constant_1.tmp_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[]}, dtype = 5, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [10], str_value = 0.0, value = 0.0)
    {Out=['array_write_0.out']} = write_to_array(inputs={I=['fill_constant_0.tmp_0'], X=['fill_constant_1.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['array_write_1.out']} = write_to_array(inputs={I=['fill_constant_0.tmp_0'], X=['d0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['fill_constant_0.tmp_0']} = increment(inputs={X=['fill_constant_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], step = 1.0)
    {Out=['array_write_1.out']} = write_to_array(inputs={I=['fill_constant_0.tmp_0'], X=['d1']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['fill_constant_0.tmp_0']} = increment(inputs={X=['fill_constant_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], step = 1.0)
    {Out=['array_write_1.out']} = write_to_array(inputs={I=['fill_constant_0.tmp_0'], X=['d2']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['fill_constant_2.tmp_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[]}, dtype = 3, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [1], str_value = 0, value = 0.0)
    {Out=['fill_constant_3.tmp_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[]}, dtype = 3, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [1], str_value = 1, value = 1.0)
    {Out=['less_than_0.tmp_0']} = less_than(inputs={X=['fill_constant_2.tmp_0'], Y=['fill_constant_3.tmp_0']}, axis = -1, force_cpu = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['fill_constant_4.tmp_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[]}, dtype = 3, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [1], str_value = 1, value = 1.0)
    {Out=['fill_constant_5.tmp_0']} = fill_constant(inputs={ShapeTensor=[], ShapeTensorList=[]}, dtype = 3, force_cpu = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], shape = [1], str_value = 3, value = 3.0)
    {Out=['less_than_1.tmp_0']} = less_than(inputs={X=['fill_constant_4.tmp_0'], Y=['fill_constant_5.tmp_0']}, axis = -1, force_cpu = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['array_write_0.out', 'fill_constant_4.tmp_0', 'less_than_0.tmp_0', 'fill_constant_2.tmp_0', 'less_than_1.tmp_0'], StepScopes=['_generated_var_1']} = while(inputs={Condition=['less_than_0.tmp_0'], X=['fill_constant_3.tmp_0', 'array_write_0.out', 'fill_constant_4.tmp_0', 'array_write_1.out', 'fill_constant_5.tmp_0', 'fill_constant_2.tmp_0', 'less_than_1.tmp_0']}, is_test = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], skip_eager_deletion_vars = [], sub_block = block[1])
    {Out=['array_read_4.tmp_0']} = read_from_array(inputs={I=['fill_constant_4.tmp_0'], X=['array_write_0.out'], X_W=[]}, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['mean_0.tmp_0']} = mean(inputs={X=['array_read_4.tmp_0']}, op_device = , op_namescope = /, op_role = 256, op_role_var = [])
    {Out=['mean_0.tmp_0@GRAD']} = fill_constant(inputs={}, dtype = 5, force_cpu = False, op_role = 257, shape = [1], value = 1.0)
    {X@GRAD=['array_read_4.tmp_0@GRAD']} = mean_grad(inputs={Out@GRAD=['mean_0.tmp_0@GRAD'], X=['array_read_4.tmp_0']}, op_device = , op_role = 1)
    {Out=['array_write_0.out@GRAD']} = write_to_array(inputs={I=['fill_constant_4.tmp_0'], X=['array_read_4.tmp_0@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [])
    {X@GRAD=['@EMPTY@', 'array_write_0.out@GRAD', '@EMPTY@', 'array_write_1.out@GRAD', '@EMPTY@', '@EMPTY@', '@EMPTY@']} = while_grad(inputs={Out=['array_write_0.out', 'fill_constant_4.tmp_0', 'less_than_0.tmp_0', 'fill_constant_2.tmp_0', 'less_than_1.tmp_0'], Out@GRAD=['array_write_0.out@GRAD'], StepScopes=['_generated_var_1'], X=['fill_constant_3.tmp_0', 'array_write_0.out', 'fill_constant_4.tmp_0', 'array_write_1.out', 'fill_constant_5.tmp_0', 'fill_constant_2.tmp_0', 'less_than_1.tmp_0']}, is_test = False, op_device = , op_namescope = /, op_role = 1, op_role_var = [], original_output_grad = ['array_write_0.out@GRAD'], skip_eager_deletion_vars = [], sub_block = block[3])
}
{ // block 1
    var _generated_var_0 : fluid.VarType.STEP_SCOPES)
    var array_read_0.tmp_0 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var array_read_1.tmp_0 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var sum_0.tmp_0 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)

    {Out=['array_read_0.tmp_0']} = read_from_array(inputs={I=['fill_constant_2.tmp_0'], X=['array_write_1.out'], X_W=[]}, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['array_read_1.tmp_0']} = read_from_array(inputs={I=['fill_constant_2.tmp_0'], X=['array_write_0.out'], X_W=[]}, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['sum_0.tmp_0']} = sum(inputs={X=['array_read_0.tmp_0', 'array_read_1.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False)
    {Out=['fill_constant_2.tmp_0']} = increment(inputs={X=['fill_constant_2.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], step = 1.0)
    {Out=['array_write_0.out']} = write_to_array(inputs={I=['fill_constant_2.tmp_0'], X=['sum_0.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['less_than_0.tmp_0']} = less_than(inputs={X=['fill_constant_2.tmp_0'], Y=['fill_constant_3.tmp_0']}, axis = -1, force_cpu = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['array_write_0.out', 'fill_constant_4.tmp_0', 'less_than_1.tmp_0'], StepScopes=['_generated_var_0']} = while(inputs={Condition=['less_than_1.tmp_0'], X=['fill_constant_4.tmp_0', 'array_write_1.out', 'array_write_0.out', 'fill_constant_5.tmp_0']}, is_test = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], skip_eager_deletion_vars = [], sub_block = block[2])
}
{ // block 2
    var array_read_2.tmp_0 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var array_read_3.tmp_0 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var sum_1.tmp_0 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)

    {Out=['array_read_2.tmp_0']} = read_from_array(inputs={I=['fill_constant_4.tmp_0'], X=['array_write_1.out'], X_W=[]}, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['array_read_3.tmp_0']} = read_from_array(inputs={I=['fill_constant_4.tmp_0'], X=['array_write_0.out'], X_W=[]}, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['sum_1.tmp_0']} = sum(inputs={X=['array_read_2.tmp_0', 'array_read_3.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False)
    {Out=['fill_constant_4.tmp_0']} = increment(inputs={X=['fill_constant_4.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [], step = 1.0)
    {Out=['array_write_0.out']} = write_to_array(inputs={I=['fill_constant_4.tmp_0'], X=['sum_1.tmp_0']}, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Out=['less_than_1.tmp_0']} = less_than(inputs={X=['fill_constant_4.tmp_0'], Y=['fill_constant_5.tmp_0']}, axis = -1, force_cpu = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
}
{ // block 3
    var array_read_0.tmp_0@GRAD : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var array_read_1.tmp_0@GRAD : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var array_write_1.out@GRAD : fluid.VarType.LOD_TENSOR_ARRAY)
    var array_write_1.out@GRAD@RENAME@block1@0 : fluid.VarType.LOD_TENSOR_ARRAY)
    var array_write_1.out@GRAD@RENAME@block1@1 : fluid.VarType.LOD_TENSOR_ARRAY)
    var sum_0.tmp_0@GRAD : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)

    {X@GRAD=['@EMPTY@', 'array_write_1.out@GRAD@RENAME@block1@0', 'array_write_0.out@GRAD', '@EMPTY@']} = while_grad(inputs={Out=['array_write_0.out', 'fill_constant_4.tmp_0', 'less_than_1.tmp_0'], Out@GRAD=['array_write_0.out@GRAD'], StepScopes=['_generated_var_0'], X=['fill_constant_4.tmp_0', 'array_write_1.out', 'array_write_0.out', 'fill_constant_5.tmp_0']}, is_test = False, op_device = , op_namescope = /, op_role = 1, op_role_var = [], original_output_grad = ['array_write_0.out@GRAD'], skip_eager_deletion_vars = [], sub_block = block[4])
    {Out=['sum_0.tmp_0@GRAD']} = read_from_array(inputs={I=['fill_constant_2.tmp_0'], X=['array_write_0.out@GRAD'], X_W=['sum_0.tmp_0']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [])
    {Out=['fill_constant_2.tmp_0']} = increment(inputs={X=['fill_constant_2.tmp_0']}, op_device = , op_role = 1, step = -1.0)
    {Out=['array_read_0.tmp_0@GRAD']} = scale(inputs={X=['sum_0.tmp_0@GRAD']}, op_device = , op_role = 1, scale = 1.0)
    {Out=['array_read_1.tmp_0@GRAD']} = scale(inputs={X=['sum_0.tmp_0@GRAD']}, op_device = , op_role = 1, scale = 1.0)
    {Out=['array_write_0.out@GRAD']} = write_to_array(inputs={I=['fill_constant_2.tmp_0'], X=['array_read_1.tmp_0@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [])
    {Out=['array_write_1.out@GRAD@RENAME@block1@1']} = write_to_array(inputs={I=['fill_constant_2.tmp_0'], X=['array_read_0.tmp_0@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [])
    {Out=['array_write_1.out@GRAD']} = sum(inputs={X=['array_write_1.out@GRAD@RENAME@block1@0', 'array_write_1.out@GRAD@RENAME@block1@1']}, op_role = 1, use_mkldnn = False)
}
{ // block 4
    var array_read_2.tmp_0@GRAD : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var array_read_3.tmp_0@GRAD : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var array_write_1.out@GRAD : fluid.VarType.LOD_TENSOR_ARRAY)
    var sum_1.tmp_0@GRAD : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)

    {Out=['sum_1.tmp_0@GRAD']} = read_from_array(inputs={I=['fill_constant_4.tmp_0'], X=['array_write_0.out@GRAD'], X_W=['sum_1.tmp_0']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [])
    {Out=['fill_constant_4.tmp_0']} = increment(inputs={X=['fill_constant_4.tmp_0']}, op_device = , op_role = 1, step = -1.0)
    {Out=['array_read_2.tmp_0@GRAD']} = scale(inputs={X=['sum_1.tmp_0@GRAD']}, op_device = , op_role = 1, scale = 1.0)
    {Out=['array_read_3.tmp_0@GRAD']} = scale(inputs={X=['sum_1.tmp_0@GRAD']}, op_device = , op_role = 1, scale = 1.0)
    {Out=['array_write_0.out@GRAD']} = write_to_array(inputs={I=['fill_constant_4.tmp_0'], X=['array_read_3.tmp_0@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [])
    {Out=['array_write_1.out@GRAD']} = write_to_array(inputs={I=['fill_constant_4.tmp_0'], X=['array_read_2.tmp_0@GRAD']}, op_device = , op_namescope = /, op_role = 1, op_role_var = [])
}
