grep: warning: GREP_OPTIONS is deprecated; please use an alias or script
2020-03-12 08:19:21,245-INFO: _static_guard
2020-03-12 08:19:21,252-INFO: _static_guard
{ // block 0
    persist var conv2d_0.b_0 : fluid.VarType.LOD_TENSOR.shape(20,).astype(VarType.FP32)
    var conv2d_0.tmp_0 : fluid.VarType.LOD_TENSOR.shape(-1, 20, 24, 24).astype(VarType.FP32)
    var conv2d_0.tmp_1 : fluid.VarType.LOD_TENSOR.shape(-1, 20, 24, 24).astype(VarType.FP32)
    var conv2d_0.tmp_2 : fluid.VarType.LOD_TENSOR.shape(-1, 20, 24, 24).astype(VarType.FP32)
    persist var conv2d_0.w_0 : fluid.VarType.LOD_TENSOR.shape(20, 1, 5, 5).astype(VarType.FP32)
    persist var conv2d_1.b_0 : fluid.VarType.LOD_TENSOR.shape(50,).astype(VarType.FP32)
    var conv2d_1.tmp_0 : fluid.VarType.LOD_TENSOR.shape(-1, 50, 8, 8).astype(VarType.FP32)
    var conv2d_1.tmp_1 : fluid.VarType.LOD_TENSOR.shape(-1, 50, 8, 8).astype(VarType.FP32)
    var conv2d_1.tmp_2 : fluid.VarType.LOD_TENSOR.shape(-1, 50, 8, 8).astype(VarType.FP32)
    persist var conv2d_1.w_0 : fluid.VarType.LOD_TENSOR.shape(50, 20, 5, 5).astype(VarType.FP32)
    persist var fc_0.b_0 : fluid.VarType.LOD_TENSOR.shape(10,).astype(VarType.FP32)
    var fc_0.tmp_0 : fluid.VarType.LOD_TENSOR.shape(-1, 10).astype(VarType.FP32)
    var fc_0.tmp_1 : fluid.VarType.LOD_TENSOR.shape(-1, 10).astype(VarType.FP32)
    var fc_0.tmp_2 : fluid.VarType.LOD_TENSOR.shape(-1, 10).astype(VarType.FP32)
    persist var fc_0.w_0 : fluid.VarType.LOD_TENSOR.shape(800, 10).astype(VarType.FP32)
    persist var feed : fluid.VarType.FEED_MINIBATCH)
    persist var fetch : fluid.VarType.FETCH_LIST)
    var img : fluid.VarType.LOD_TENSOR.shape(-1, 1, 28, 28).astype(VarType.FP32)
    var pool2d_0.tmp_0 : fluid.VarType.LOD_TENSOR.shape(-1, 20, 12, 12).astype(VarType.FP32)
    var pool2d_1.tmp_0 : fluid.VarType.LOD_TENSOR.shape(-1, 50, 4, 4).astype(VarType.FP32)
    var save_infer_model/scale_0 : fluid.VarType.LOD_TENSOR.shape(-1, 10).astype(VarType.FP32)

    {Out=['img']} = feed(inputs={X=['feed']}, col = 0, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
    {Output=['conv2d_0.tmp_0']} = conv2d(inputs={Bias=[], Filter=['conv2d_0.w_0'], Input=['img'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_cudnn = True, use_mkldnn = False, use_quantizer = False, workspace_size_MB = 512)
    {Out=['conv2d_0.tmp_1']} = elementwise_add(inputs={X=['conv2d_0.tmp_0'], Y=['conv2d_0.b_0']}, axis = 1, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, x_data_format = , y_data_format = )
    {Out=['conv2d_0.tmp_2']} = relu(inputs={X=['conv2d_0.tmp_1']}, is_test = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = True, use_mkldnn = False)
    {Out=['pool2d_0.tmp_0']} = pool2d(inputs={X=['conv2d_0.tmp_2']}, adaptive = False, ceil_mode = False, data_format = NCHW, exclusive = True, global_pooling = False, is_test = True, ksize = [2, 2], op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], pooling_type = max, strides = [2, 2], use_cudnn = True, use_mkldnn = False, use_quantizer = False)
    {Output=['conv2d_1.tmp_0']} = conv2d(inputs={Bias=[], Filter=['conv2d_1.w_0'], Input=['pool2d_0.tmp_0'], ResidualData=[]}, Scale_in = 1.0, Scale_in_eltwise = 1.0, Scale_out = 1.0, Scale_weights = [1.0], data_format = NCHW, dilations = [1, 1], exhaustive_search = False, force_fp32_output = False, fuse_activation = , fuse_alpha = 0.0, fuse_beta = 0.0, fuse_brelu = False, fuse_brelu_threshold = 6.0, fuse_relu = False, fuse_relu_before_depthwise_conv = False, fuse_residual_connection = False, groups = 1, is_test = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], strides = [1, 1], use_cudnn = True, use_mkldnn = False, use_quantizer = False, workspace_size_MB = 512)
    {Out=['conv2d_1.tmp_1']} = elementwise_add(inputs={X=['conv2d_1.tmp_0'], Y=['conv2d_1.b_0']}, axis = 1, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, x_data_format = , y_data_format = )
    {Out=['conv2d_1.tmp_2']} = relu(inputs={X=['conv2d_1.tmp_1']}, is_test = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = True, use_mkldnn = False)
    {Out=['pool2d_1.tmp_0']} = pool2d(inputs={X=['conv2d_1.tmp_2']}, adaptive = False, ceil_mode = False, data_format = NCHW, exclusive = True, global_pooling = False, is_test = True, ksize = [2, 2], op_device = , op_namescope = /, op_role = 0, op_role_var = [], padding_algorithm = EXPLICIT, paddings = [0, 0], pooling_type = max, strides = [2, 2], use_cudnn = True, use_mkldnn = False, use_quantizer = False)
    {Out=['fc_0.tmp_0']} = mul(inputs={X=['pool2d_1.tmp_0'], Y=['fc_0.w_0']}, force_fp32_output = False, op_device = , op_namescope = /, op_role = 0, op_role_var = [], scale_out = 1.0, scale_x = 1.0, scale_y = [1.0], use_mkldnn = False, x_num_col_dims = 1, y_num_col_dims = 1)
    {Out=['fc_0.tmp_1']} = elementwise_add(inputs={X=['fc_0.tmp_0'], Y=['fc_0.b_0']}, axis = 1, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_mkldnn = False, x_data_format = , y_data_format = )
    {Out=['fc_0.tmp_2']} = softmax(inputs={X=['fc_0.tmp_1']}, axis = -1, data_format = AnyLayout, is_test = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], use_cudnn = False, use_mkldnn = False)
    {Out=['save_infer_model/scale_0']} = scale(inputs={ScaleTensor=[], X=['fc_0.tmp_2']}, bias = 0.0, bias_after_scale = True, op_device = , op_namescope = /, op_role = 0, op_role_var = [], scale = 1.0)
    {Out=['fetch']} = fetch(inputs={X=['save_infer_model/scale_0']}, col = 0, op_device = , op_namescope = /, op_role = 0, op_role_var = [])
}
